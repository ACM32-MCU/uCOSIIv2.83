


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                              uC/OS-II
    3 00000000         ;                                        The Real-Time K
                       ernel
    4 00000000         ;
    5 00000000         ;                    Copyright 1992-2021 Silicon Laborat
                       ories Inc. www.silabs.com
    6 00000000         ;
    7 00000000         ;                                 SPDX-License-Identifie
                       r: APACHE-2.0
    8 00000000         ;
    9 00000000         ;               This software is subject to an open sour
                       ce license and is distributed by
   10 00000000         ;                Silicon Laboratories Inc. pursuant to t
                       he terms of the Apache License,
   11 00000000         ;                    Version 2.0 available at www.apache
                       .org/licenses/LICENSE-2.0.
   12 00000000         ;
   13 00000000         ;*******************************************************
                       *************************************************
   14 00000000         
   15 00000000         ;*******************************************************
                       *************************************************
   16 00000000         ;
   17 00000000         ;                                             ARMv6-M Po
                       rt
   18 00000000         ;
   19 00000000         ; Filename  : os_cpu_a.asm
   20 00000000         ; Version   : V2.93.01
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         ; For       : ARMv6-M Cortex-M0 or Cortex-M0+
   23 00000000         ; Mode      : Thumb2
   24 00000000         ; Toolchain : ARM C Compiler
   25 00000000         ;*******************************************************
                       **************************************************
   26 00000000         ; Note(s)   : (1) This port supports the ARM Cortex-M0 a
                       nd Cortex-M0+ architectures.
   27 00000000         ;*******************************************************
                       **************************************************
   28 00000000         
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   31 00000000         ;*******************************************************
                       *************************************************
   32 00000000         
   33 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   34 00000000                 EXTERN           OSPrioCur
   35 00000000                 EXTERN           OSPrioHighRdy
   36 00000000                 EXTERN           OSTCBCur
   37 00000000                 EXTERN           OSTCBHighRdy
   38 00000000                 EXTERN           OSIntExit
   39 00000000                 EXTERN           OSTaskSwHook
   40 00000000                 EXTERN           OS_CPU_ExceptStkBase
   41 00000000         



ARM Macro Assembler    Page 2 


   42 00000000         
   43 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   44 00000000                 EXPORT           OS_CPU_SR_Save
   45 00000000                 EXPORT           OS_CPU_SR_Restore
   46 00000000                 EXPORT           OSCtxSw
   47 00000000                 EXPORT           OSIntCtxSw
   48 00000000                 EXPORT           OS_CPU_PendSVHandler
   49 00000000         
   50 00000000         
   51 00000000         ;*******************************************************
                       *************************************************
   52 00000000         ;                                               EQUATES
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         
   55 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   56 00000000 E000ED20 
                       NVIC_SYSPRI14
                               EQU              0xE000ED20  ; System priority r
                                                            egister (priority 1
                                                            4).
   57 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest).
   58 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   59 00000000         
   60 00000000         
   61 00000000         ;*******************************************************
                       *************************************************
   62 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   63 00000000         ;*******************************************************
                       *************************************************
   64 00000000         
   65 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   66 00000000                 THUMB
   67 00000000                 REQUIRE8
   68 00000000                 PRESERVE8
   69 00000000         
   70 00000000         ;*******************************************************
                       *************************************************
   71 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   72 00000000         ;
   73 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   74 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   75 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to



ARM Macro Assembler    Page 3 


   76 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   77 00000000         ;              into the CPU's status register.
   78 00000000         ;
   79 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   80 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   81 00000000         ;
   82 00000000         ;
   83 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   84 00000000         ;
   85 00000000         ;                 void Task (void *p_arg)
   86 00000000         ;                 {
   87 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   88 00000000         ;                     OS_CPU_SR  cpu_sr;
   89 00000000         ;                 #endif
   90 00000000         ;
   91 00000000         ;                          :
   92 00000000         ;                          :
   93 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   94 00000000         ;                          :
   95 00000000         ;                          :
   96 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   97 00000000         ;                          :
   98 00000000         ;                          :
   99 00000000         ;                 }
  100 00000000         ;*******************************************************
                       *************************************************
  101 00000000         
  102 00000000         OS_CPU_SR_Save
  103 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  104 00000004 B672            CPSID            I
  105 00000006 4770            BX               LR
  106 00000008         
  107 00000008         OS_CPU_SR_Restore
  108 00000008 F380 8810       MSR              PRIMASK, R0
  109 0000000C 4770            BX               LR
  110 0000000E         
  111 0000000E         
  112 0000000E         ;*******************************************************
                       *************************************************
  113 0000000E         ;                                         START MULTITAS
                       KING
  114 0000000E         ;                                      void OSStartHighR
                       dy(void)
  115 0000000E         ;
  116 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  117 0000000E         ;              the first task to start.
  118 0000000E         ;
  119 0000000E         ;           2) OSStartHighRdy() MUST:
  120 0000000E         ;              a) Setup PendSV exception priority to low
                       est;



ARM Macro Assembler    Page 4 


  121 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  122 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base;
  123 0000000E         ;              d) Set OSRunning to TRUE;
  124 0000000E         ;              e) Trigger PendSV exception;
  125 0000000E         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  126 0000000E         ;*******************************************************
                       *************************************************
  127 0000000E         
  128 0000000E         OSStartHighRdy
  129 0000000E 4823            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  130 00000010 4923            LDR              R1, =NVIC_PENDSV_PRI
  131 00000012 6001            STR              R1, [R0]
  132 00000014         
  133 00000014 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  134 00000016 F380 8809       MSR              PSP, R0
  135 0000001A F7FF FFFE       BL               OSTaskSwHook
  136 0000001E         
  137 0000001E 4821            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  138 00000020 6801            LDR              R1, [R0]
  139 00000022 F381 8808       MSR              MSP, R1
  140 00000026         
  141 00000026 4820            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  142 00000028 2101            MOVS             R1, #1
  143 0000002A 7001            STRB             R1, [R0]
  144 0000002C         
  145 0000002C 481F            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  146 0000002E 4920            LDR              R1, =NVIC_PENDSVSET
  147 00000030 6001            STR              R1, [R0]
  148 00000032         
  149 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  150 00000034         
  151 00000034         OSStartHang
  152 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  153 00000036         
  154 00000036         
  155 00000036         ;*******************************************************
                       *************************************************
  156 00000036         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  157 00000036         ;
  158 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function



ARM Macro Assembler    Page 5 


  159 00000036         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  160 00000036         ;*******************************************************
                       *************************************************
  161 00000036         
  162 00000036         OSCtxSw
  163 00000036 481D            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  164 00000038 491D            LDR              R1, =NVIC_PENDSVSET
  165 0000003A 6001            STR              R1, [R0]
  166 0000003C 4770            BX               LR
  167 0000003E         
  168 0000003E         
  169 0000003E         ;*******************************************************
                       *************************************************
  170 0000003E         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  171 0000003E         ;
  172 0000003E         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  173 0000003E         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  174 0000003E         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  175 0000003E         ;*******************************************************
                       *************************************************
  176 0000003E         
  177 0000003E         OSIntCtxSw
  178 0000003E 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  179 00000040 491B            LDR              R1, =NVIC_PENDSVSET
  180 00000042 6001            STR              R1, [R0]
  181 00000044 4770            BX               LR
  182 00000046         
  183 00000046         
  184 00000046         ;*******************************************************
                       *************************************************
  185 00000046         ;                                       HANDLE PendSV EX
                       CEPTION
  186 00000046         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  187 00000046         ;
  188 00000046         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  189 00000046         ;              context switches with Cortex-M0.  This is
                        because the Cortex-M0 auto-saves half of the
  190 00000046         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  191 00000046         ;              saving of R4-R11, LR is required and fixi
                       ng up the stack pointers. Using the PendSV exception
  192 00000046         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  193 00000046         ;              a thread or occurs due to an interrupt or
                        exception.
  194 00000046         ;



ARM Macro Assembler    Page 6 


  195 00000046         ;           2) Pseudo-code is:
  196 00000046         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  197 00000046         ;              b) Adjust SP to make space for R4-R11 and
                        LR register
  198 00000046         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  199 00000046         ;              d) Save remaining regs R4-R11, LR on proc
                       ess stack;
  200 00000046         ;              e) Call OSTaskSwHook();
  201 00000046         ;              f) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  202 00000046         ;              g) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  203 00000046         ;              h) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  204 00000046         ;              i) Adjust SP to the High Registers(R8-R11
                       ) & LR location
  205 00000046         ;              j) Restore R8-R11, and LR from new proces
                       s stack;
  206 00000046         ;              k) Load PSP with new process SP
  207 00000046         ;              m) Restore remaining R4-R7 from new proce
                       ss stack
  208 00000046         ;              n) Perform exception return which will re
                       store remaining context.
  209 00000046         ;
  210 00000046         ;           3) On entry into PendSV handler:
  211 00000046         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  212 00000046         ;                 xPSR, PC, LR, R12, R0-R3
  213 00000046         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  214 00000046         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  215 00000046         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  216 00000046         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  217 00000046         ;
  218 00000046         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  219 00000046         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  220 00000046         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  221 00000046         ;*******************************************************
                       *************************************************
  222 00000046         
  223 00000046         OS_CPU_PendSVHandler
  224 00000046 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  225 00000048 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  226 0000004C         
  227 0000004C 2800            CMP              R0, #0
  228 0000004E D00B            BEQ              OS_CPU_PendSVHandler_nosave ; e
                                                            quivalent code to C
                                                            BZ from M3 arch to 



ARM Macro Assembler    Page 7 


                                                            M0 arch
  229 00000050         ; Except that it does not change the condition code flag
                       s
  230 00000050         
  231 00000050 3824            SUBS             R0, R0, #0x24 ; Adjust SP to ma
                                                            ke space for Low, H
                                                            igh & LR registers
  232 00000052 4918            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  233 00000054 6809            LDR              R1, [R1]
  234 00000056 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  235 00000058         
  236 00000058 C0F0            STMIA            R0!, {R4-R7} ; Store R4-R7(Low 
                                                            Registers) on proce
                                                            ss stack
  237 0000005A 4644            MOV              R4, R8      ; Move R8-R11 value
                                                            s to R4-R7 register
                                                            s.
  238 0000005C 464D            MOV              R5, R9
  239 0000005E 4656            MOV              R6, R10
  240 00000060 465F            MOV              R7, R11
  241 00000062 C0F0            STMIA            R0!, {R4-R7} ; Store R8-R11(Hig
                                                            h Registers) on pro
                                                            cess stack
  242 00000064 4673            MOV              R3, R14     ; R3 is LR of proce
                                                            ss being switched o
                                                            ut
  243 00000066 C008            STMIA            R0!, {R3}   ; Store LR (EXC_RET
                                                            URN) on process sta
                                                            ck.
  244 00000068         
  245 00000068         ; At this point, entire context of process has been save
                       d
  246 00000068         OS_CPU_PendSVHandler_nosave
  247 00000068 F7FF FFFE       BL               OSTaskSwHook ; OSTaskSwHook();
  248 0000006C         
  249 0000006C 4812            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  250 0000006E 4913            LDR              R1, =OSPrioHighRdy
  251 00000070 780A            LDRB             R2, [R1]
  252 00000072 7002            STRB             R2, [R0]
  253 00000074         
  254 00000074 480F            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  255 00000076 4912            LDR              R1, =OSTCBHighRdy
  256 00000078 680A            LDR              R2, [R1]
  257 0000007A 6002            STR              R2, [R0]
  258 0000007C         
  259 0000007C 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  260 0000007E         
  261 0000007E 3010            ADDS             R0, #0x10   ; Adjust SP to High
                                                             Registers(R8-R11) 
                                                            location
  262 00000080 C8F0            LDMFD            R0!, {R4-R7} ; Load R8-R11 valu
                                                            es from new process



ARM Macro Assembler    Page 8 


                                                             stack into R4-R7
  263 00000082 46A0            MOV              R8,  R4     ; Restore R8-R11 by
                                                             moving their value
                                                            s from R4-R7
  264 00000084 46A9            MOV              R9,  R5
  265 00000086 46B2            MOV              R10, R6
  266 00000088 46BB            MOV              R11, R7
  267 0000008A         
  268 0000008A C808            LDMFD            R0!, {R3}   ; R3 has the new pr
                                                            ocess LR; R3 = LR (
                                                            EXEC_RETURN)
  269 0000008C 469E            MOV              R14, R3     ; Restore LR (EXEC_
                                                            RETURN)
  270 0000008E         
  271 0000008E F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  272 00000092         
  273 00000092 3824            SUBS             R0, #0x24   ; Adjust SP to Low 
                                                            registers(R4-R7) lo
                                                            cation
  274 00000094 C8F0            LDMFD            R0!, {R4-R7} ; Restore remainin
                                                            g R4-R7 from new pr
                                                            ocess stack
  275 00000096         
  276 00000096 B662            CPSIE            I
  277 00000098 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  278 0000009A         
  279 0000009A 00 00           ALIGN                        ; Ensures that ARM 
                                                            instructions start 
                                                            on four-byte bounda
                                                            ry
  280 0000009C         
  281 0000009C                 END
              E000ED20 
              00FF0000 
              00000000 
              00000000 
              E000ED04 
              10000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -ID:\Keil_v5\Arm\Packs
\ARM\CMSIS\5.7.0\Device\ARM\ARMCM0\Include -ID:\Keil_v5\ARM\CMSIS\Include --pre
define="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 533" --predefine
="ARMCM0 SETA 1" --list=.\listings\os_cpu_a.lst ..\..\..\Ports\ARM-Cortex-M0\AR
M\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 65 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 162 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 46 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000003E

Symbol: OSIntCtxSw
   Definitions
      At line 177 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 47 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 151 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 152 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 128 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 43 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000046

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 223 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 48 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000068

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 246 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 228 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 107 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 45 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 102 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 44 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 55 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 145 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
      At line 163 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
      At line 178 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 58 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 146 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
      At line 164 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
      At line 179 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 57 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 130 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED20

Symbol: NVIC_SYSPRI14
   Definitions
      At line 56 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 129 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 38 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 34 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 249 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 35 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 250 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 33 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 141 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 36 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 232 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
      At line 254 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 37 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 255 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 39 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 135 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
      At line 247 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm

OS_CPU_ExceptStkBase 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 40 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
   Uses
      At line 137 in file ..\..\..\Ports\ARM-Cortex-M0\ARM\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
356 symbols in table
