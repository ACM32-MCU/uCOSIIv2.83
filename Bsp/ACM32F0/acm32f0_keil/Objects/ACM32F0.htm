<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ACM32F0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ACM32F0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Jan 26 17:54:09 2022
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BSPInit &rArr; uart_init &rArr; HAL_UART_Init &rArr; UART_Config_BaudRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[61]">OS_CPU_SR_Save</a>
 <LI><a href="#[64]">OS_CPU_SR_Restore</a>
 <LI><a href="#[33]">OSStartHighRdy</a>
 <LI><a href="#[75]">OSCtxSw</a>
 <LI><a href="#[63]">OSIntCtxSw</a>
 <LI><a href="#[5]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[13]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[25]">AES_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[24]">CAN1_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[e]">CLKRDY_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[10]">DMA_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[9]">EFC_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[c]">EXTI_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[a]">GPIOAB_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[b]">GPIOCD_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from system_acm32f0x0.o(i.HardFault_Handler) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[f]">LCD_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[23]">LPUART_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[5]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[28]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[29]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[16]">RSV_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced 2 times from startup_acm32f0x0.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[d]">SRAM_PARITY_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[14]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[15]">TIM1_CC_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[17]">TIM3_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[18]">TIM6_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[12]">TKEY_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[2d]">TaskLed</a> from main.o(i.TaskLed) referenced from main.o(i.main)
 <LI><a href="#[2b]">TaskStart</a> from main.o(i.TaskStart) referenced from main.o(i.main)
 <LI><a href="#[2c]">TaskUser</a> from main.o(i.TaskUser) referenced from main.o(i.main)
 <LI><a href="#[6]">Tmr_TickISR_Handler</a> from bsp.o(i.Tmr_TickISR_Handler) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[21]">UART1_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[22]">UART2_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[11]">UART3_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_acm32f0x0.o(.text) referenced from startup_acm32f0x0.o(RESET)
 <LI><a href="#[27]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_acm32f0x0.o(.text)
 <LI><a href="#[2a]">fputc</a> from hal_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[8e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[30]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[90]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[91]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[13]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CLKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RSV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SRAM_PARITY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TKEY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f0x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[64]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[33]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[75]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[63]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[5]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init_Para
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config_BaudRate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SysTick_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config_BaudRate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config_BaudRate
</UL>

<P><STRONG><a name="[93]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUser
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[94]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[95]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[96]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[3b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>BSPInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(i.BSPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BSPInit &rArr; uart_init &rArr; HAL_UART_Init &rArr; UART_Config_BaudRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>HAL_EFlash_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_eflash.o(i.HAL_EFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_EFlash_Init &rArr; HAL_EFlash_Init_Para &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clock_Init
</UL>

<P><STRONG><a name="[4a]"></a>HAL_EFlash_Init_Para</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, hal_eflash_ex.o(i.HAL_EFlash_Init_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_EFlash_Init_Para &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init
</UL>

<P><STRONG><a name="[4c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 920 bytes, Stack size 56 bytes, hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Module_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[80]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
</UL>

<P><STRONG><a name="[4e]"></a>HAL_UART_Init</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UART_Init &rArr; UART_Config_BaudRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config_BaudRate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[4f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, bsp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Module_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_acm32f0x0.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>OSInitHookBegin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5f]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[82]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickISR_Handler
</UL>

<P><STRONG><a name="[60]"></a>OSIntExit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickISR_Handler
</UL>

<P><STRONG><a name="[65]"></a>OSStart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[66]"></a>OSTaskCreate</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>OSTaskCreateExt</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[77]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[78]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[6c]"></a>OSTaskNameSet</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[79]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[6f]"></a>OSTaskStkChk</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[67]"></a>OSTaskStkInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[34]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_PendSVHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>

<P><STRONG><a name="[70]"></a>OSTimeDly</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUser
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[71]"></a>OSTimeGet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, os_time.o(i.OSTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUser
</UL>

<P><STRONG><a name="[72]"></a>OSTimeTick</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickISR_Handler
</UL>

<P><STRONG><a name="[73]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[5a]"></a>OS_FlagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[74]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[5b]"></a>OS_MemInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5c]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[69]"></a>OS_Sched</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[6e]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_StrCopy))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[6d]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_StrLen))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[68]"></a>OS_TCBInit</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[28]"></a>OS_TaskIdle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[29]"></a>OS_TaskStat</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[7a]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[6b]"></a>OS_TaskStkClr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[7b]"></a>System_Clock_Init</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, system_acm32f0x0.o(i.System_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = System_Clock_Init &rArr; HAL_EFlash_Init &rArr; HAL_EFlash_Init_Para &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[7e]"></a>System_Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_acm32f0x0.o(i.System_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Module_Enable
</UL>

<P><STRONG><a name="[85]"></a>System_Get_APBClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_acm32f0x0.o(i.System_Get_APBClock))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config_BaudRate
</UL>

<P><STRONG><a name="[84]"></a>System_Get_Clk_Source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_acm32f0x0.o(i.System_Get_Clk_Source))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config_BaudRate
</UL>

<P><STRONG><a name="[83]"></a>System_Get_SystemClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_acm32f0x0.o(i.System_Get_SystemClock))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickInit
</UL>

<P><STRONG><a name="[46]"></a>System_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, system_acm32f0x0.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = System_Init &rArr; System_Clock_Init &rArr; HAL_EFlash_Init &rArr; HAL_EFlash_Init_Para &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SysTick_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Set_Buzzer_Divider
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPInit
</UL>

<P><STRONG><a name="[4d]"></a>System_Module_Enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, system_acm32f0x0.o(i.System_Module_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[7c]"></a>System_Set_Buzzer_Divider</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_acm32f0x0.o(i.System_Set_Buzzer_Divider))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[7d]"></a>System_SysTick_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system_acm32f0x0.o(i.System_SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = System_SysTick_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2d]"></a>TaskLed</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i.TaskLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = TaskLed &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2b]"></a>TaskStart</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = TaskStart &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2c]"></a>TaskUser</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.TaskUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = TaskUser &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[6]"></a>Tmr_TickISR_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(i.Tmr_TickISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tmr_TickISR_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f0x0.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Tmr_TickInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp.o(i.Tmr_TickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Tmr_TickInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_SystemClock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPInit
</UL>

<P><STRONG><a name="[86]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[99]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[81]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUser
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[9a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[41]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2a]"></a>fputc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_uart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; BSPInit &rArr; uart_init &rArr; HAL_UART_Init &rArr; UART_Config_BaudRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[47]"></a>uart_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; UART_Config_BaudRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPInit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7f]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_acm32f0x0.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SysTick_Init
</UL>

<P><STRONG><a name="[50]"></a>UART_Config_BaudRate</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, hal_uart.o(i.UART_Config_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Config_BaudRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_Clk_Source
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_APBClock
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[51]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[53]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[52]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[59]"></a>OS_InitEventList</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[56]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[57]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[58]"></a>OS_InitTCBList</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5d]"></a>OS_InitTaskIdle</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5e]"></a>OS_InitTaskStat</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[62]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[88]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[87]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[8b]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
