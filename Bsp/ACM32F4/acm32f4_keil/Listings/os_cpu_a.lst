


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 2006, Micr
                       ium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           ARM Cortex-M
                       3 Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.89
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;             Neil
   14 00000000         ;
   15 00000000         ; For       : ARMv7M 
   16 00000000         ; Mode      : Thumb2
   17 00000000         ; Toolchain : ARM C Compiler
   18 00000000         ;*******************************************************
                       *************************************************
   19 00000000         
   20 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   21 00000000                 EXTERN           OSPrioCur
   22 00000000                 EXTERN           OSPrioHighRdy
   23 00000000                 EXTERN           OSTCBCur
   24 00000000                 EXTERN           OSTCBHighRdy
   25 00000000                 EXTERN           OSIntNesting
   26 00000000                 EXTERN           OSIntExit
   27 00000000                 EXTERN           OSTaskSwHook
   28 00000000         
   29 00000000         
   30 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   31 00000000                 EXPORT           OS_CPU_SR_Restore
   32 00000000                 EXPORT           OSStartHighRdy
   33 00000000                 EXPORT           OSCtxSw
   34 00000000                 EXPORT           OSIntCtxSw
   35 00000000                 EXPORT           OS_CPU_PendSVHandler
   36 00000000         
   37 00000000         ;*******************************************************
                       *************************************************
   38 00000000         ;                                                EQUATES
                       
   39 00000000         ;*******************************************************
                       *************************************************
   40 00000000         
   41 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   42 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r



ARM Macro Assembler    Page 2 


                                                            egister (priority 1
                                                            4).
   43 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   44 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   45 00000000         
   46 00000000         
   47 00000000         ;*******************************************************
                       *************************************************
   48 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   49 00000000         ;
   50 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   51 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   52 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   53 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   54 00000000         ;              into the CPU's status register.
   55 00000000         ;
   56 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   57 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   58 00000000         ;
   59 00000000         ;
   60 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   61 00000000         ;
   62 00000000         ;                 void Task (void *p_arg)
   63 00000000         ;                 {
   64 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   65 00000000         ;                     OS_CPU_SR  cpu_sr;
   66 00000000         ;                 #endif
   67 00000000         ;
   68 00000000         ;                          :
   69 00000000         ;                          :
   70 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   71 00000000         ;                          :
   72 00000000         ;                          :
   73 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   74 00000000         ;                          :
   75 00000000         ;                          :
   76 00000000         ;                 }
   77 00000000         ;
   78 00000000         ;              2) OS_CPU_SaveSR() is implemented as reco
                       mmended by Atmel's application note:
   79 00000000         ;
   80 00000000         ;                    "Disabling Interrupts at Processor 
                       Level"



ARM Macro Assembler    Page 3 


   81 00000000         ;*******************************************************
                       **************************************************
   82 00000000         
   83 00000000                 AREA             |.text|,CODE,READONLY,ALIGN=2
   84 00000000                 THUMB
   85 00000000                 REQUIRE8
   86 00000000                 PRESERVE8
   87 00000000         
   88 00000000         OS_CPU_SR_Save
   89 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   90 00000004 B672            CPSID            I
   91 00000006 4770            BX               LR
   92 00000008         
   93 00000008         OS_CPU_SR_Restore
   94 00000008 F380 8810       MSR              PRIMASK, R0
   95 0000000C 4770            BX               LR
   96 0000000E         
   97 0000000E         ;*******************************************************
                       *************************************************
   98 0000000E         ;                                          START MULTITA
                       SKING
   99 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  100 0000000E         ;
  101 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  102 0000000E         ;              the first task to start.
  103 0000000E         ;
  104 0000000E         ;           2) OSStartHighRdy() MUST:
  105 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  106 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  107 0000000E         ;              c) Set OSRunning to TRUE;
  108 0000000E         ;              d) Trigger PendSV exception;
  109 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  110 0000000E         ;*******************************************************
                       *************************************************
  111 0000000E         
  112 0000000E         OSStartHighRdy
  113 0000000E 4828            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  114 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  115 00000014 7001            STRB             R1, [R0]
  116 00000016         
  117 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  118 00000018 F380 8809       MSR              PSP, R0
  119 0000001C         
  120 0000001C 4825            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  121 0000001E 2101            MOVS             R1, #1
  122 00000020 7001            STRB             R1, [R0]
  123 00000022         



ARM Macro Assembler    Page 4 


  124 00000022 4825            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  125 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  126 00000028 6001            STR              R1, [R0]
  127 0000002A         
  128 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  129 0000002C         
  130 0000002C         OSStartHang
  131 0000002C E7FE            B                OSStartHang ; Should never get 
                                                            here
  132 0000002E         
  133 0000002E         
  134 0000002E         ;*******************************************************
                       *************************************************
  135 0000002E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  136 0000002E         ;                                           void OSCtxSw
                       (void)
  137 0000002E         ;
  138 0000002E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  139 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  140 0000002E         ;*******************************************************
                       *************************************************
  141 0000002E         
  142 0000002E         OSCtxSw
  143 0000002E 4822            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  144 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  145 00000034 6001            STR              R1, [R0]
  146 00000036 4770            BX               LR
  147 00000038         
  148 00000038         ;*******************************************************
                       *************************************************
  149 00000038         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  150 00000038         ;                                         void OSIntCtxS
                       w(void)
  151 00000038         ;
  152 00000038         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  153 00000038         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  154 00000038         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  155 00000038         ;*******************************************************
                       *************************************************
  156 00000038         
  157 00000038         OSIntCtxSw
  158 00000038 481F            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi



ARM Macro Assembler    Page 5 


                                                            tch)
  159 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  160 0000003E 6001            STR              R1, [R0]
  161 00000040 4770            BX               LR
  162 00000042         
  163 00000042         ;*******************************************************
                       *************************************************
  164 00000042         ;                                         HANDLE PendSV 
                       EXCEPTION
  165 00000042         ;                                     void OS_CPU_PendSV
                       Handler(void)
  166 00000042         ;
  167 00000042         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  168 00000042         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  169 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  170 00000042         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  171 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  172 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  173 00000042         ;
  174 00000042         ;           2) Pseudo-code is:
  175 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  176 00000042         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  177 00000042         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  178 00000042         ;              d) Call OSTaskSwHook();
  179 00000042         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  180 00000042         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  181 00000042         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  182 00000042         ;              h) Restore R4-R11 from new process stack;
                       
  183 00000042         ;              i) Perform exception return which will re
                       store remaining context.
  184 00000042         ;
  185 00000042         ;           3) On entry into PendSV handler:
  186 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  187 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  188 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  189 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  190 00000042         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  191 00000042         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  192 00000042         ;
  193 00000042         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we



ARM Macro Assembler    Page 6 


  194 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  195 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  196 00000042         ;*******************************************************
                       *************************************************
  197 00000042         
  198 00000042         OS_CPU_PendSVHandler
  199 00000042 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  200 00000044 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  201 00000048 B188            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  202 0000004A         
  203 0000004A                 IF               {FPU} != "SoftVFP"
  204 0000004A F01E 0F10       TST              LR, #0x10   ; if(!EXC_RETURN[4]
                                                            ), The PE allocated
                                                             space on the stack
                                                             for FP context.
  205 0000004E BF08 ED20 
              8B10             VSTMFDEQ         R0!, {d8 - d15} ; push FPU regi
                                                            ster s16~s31
  206 00000054                 ENDIF
  207 00000054         
  208 00000054 E920 0FF0       STMFD            R0!, {R4-R11} ; push R4-R11
  209 00000058         
  210 00000058                 IF               {FPU} != "SoftVFP"
  211 00000058 F04F 0400       MOV              R4, #0x00   ; flag = 0
  212 0000005C F01E 0F10       TST              LR, #0x10   ; if(!EXC_RETURN[4]
                                                            )
  213 00000060 BF08 2401       MOVEQ            R4, #0x01   ; flag = 1
  214 00000064 F840 4D04       STMFD            R0!, {R4}   ; push flag
  215 00000068                 ENDIF
  216 00000068         
  217 00000068 4914            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  218 0000006A 6809            LDR              R1, [R1]
  219 0000006C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  220 0000006E         ; At this point, entire context of process has been save
                       d
  221 0000006E         OS_CPU_PendSVHandler_nosave
  222 0000006E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  223 00000070 4813            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  224 00000072 4780            BLX              R0
  225 00000074 F85D EB04       POP              {R14}
  226 00000078         
  227 00000078         ; OSPrioCur = OSPrioHighRdy
  228 00000078 4812            LDR              R0, =OSPrioCur 
                                                            ; R0 = &OSPrioCur
  229 0000007A 4913            LDR              R1, =OSPrioHighRdy ; R1 = &OSPr
                                                            ioHighRdy



ARM Macro Assembler    Page 7 


  230 0000007C 780A            LDRB             R2, [R1]    ; R2 = *R1
  231 0000007E 7002            STRB             R2, [R0]    ; *R0 = R2
  232 00000080         
  233 00000080         ; OSTCBCur  = OSTCBHighRdy
  234 00000080 480E            LDR              R0, =OSTCBCur ; R0 = &OSTCBCur
  235 00000082 4912            LDR              R1, =OSTCBHighRdy ; R1 = &OSTCB
                                                            HighRdy
  236 00000084 680A            LDR              R2, [R1]    ; R2 = *R1, R2 = OS
                                                            TCBHighRdy
  237 00000086 6002            STR              R2, [R0]    ; *R0 = R2, OSTCBCu
                                                            r = OSTCBHighRdy
  238 00000088         
  239 00000088 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBCur-
                                                            >OSTCBStkPtr;
  240 0000008A         
  241 0000008A                 IF               {FPU} != "SoftVFP"
  242 0000008A C808            LDMFD            R0!, {R3}   ; R3 = flag
  243 0000008C                 ENDIF
  244 0000008C         
  245 0000008C E8B0 0FF0       LDMFD            R0!, {R4-R11} ; Restore r4-11 f
                                                            rom new process sta
                                                            ck
  246 00000090         
  247 00000090                 IF               {FPU} != "SoftVFP"
  248 00000090 2B00            CMP              R3, #0      ; flag == 1
  249 00000092 BF18 ECB0 
              8B10             VLDMFDNE         R0!, {d8 - d15} ; pop FPU regis
                                                            ter s16~s31
  250 00000098                 ENDIF
  251 00000098         
  252 00000098 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  253 0000009C         
  254 0000009C                 IF               {FPU} != "SoftVFP"
  255 0000009C F04E 0E10       ORR              LR, LR, #0x10 ; lr |=  (1 << 4)
                                                            , clean FPCA.
  256 000000A0 2B00            CMP              R3,  #0     ; if(flag_r3 != 0)
  257 000000A2 BF18 F02E 
              0E10             BICNE            LR, LR, #0x10 ; lr &= ~(1 << 4)
                                                            , set FPCA.
  258 000000A8                 ENDIF
  259 000000A8         
  260 000000A8 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  261 000000AC         
  262 000000AC B662            CPSIE            I
  263 000000AE 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  264 000000B0         
  265 000000B0                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 8 


              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M33 --fpu=FPv5-S
P --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -ID:\Keil_v5\Arm\Packs\A
RM\CMSIS\5.7.0\Device\ARM\ARMCM33\Include -ID:\Keil_v5\ARM\CMSIS\Include --pred
efine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 533" --predefine=
"ARMCM33_DSP_FP SETA 1" --list=.\listings\os_cpu_a.lst ..\..\..\Ports\ARM-Corte
x-M33\Generic\RealView\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 83 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 0000002E

Symbol: OSCtxSw
   Definitions
      At line 142 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
   Uses
      At line 33 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000038

Symbol: OSIntCtxSw
   Definitions
      At line 157 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
   Uses
      At line 34 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002C

Symbol: OSStartHang
   Definitions
      At line 130 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
   Uses
      At line 131 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 112 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
   Uses
      At line 32 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000042

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 198 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
   Uses
      At line 35 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
Comment: OS_CPU_PendSVHandler used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

OS_CPU_PendSVHandler_nosave 0000006E

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 221 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
   Uses
      At line 201 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 93 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 31 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 88 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 30 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
Comment: OS_CPU_SR_Save used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 41 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 124 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
      At line 143 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
      At line 158 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 44 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 125 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
      At line 144 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
      At line 159 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 43 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 114 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 42 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 113 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 26 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 25 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 21 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 228 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 22 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 229 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 20 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 120 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 23 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 217 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
      At line 234 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 24 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 235 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 27 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu_
a.asm
   Uses
      At line 223 in file ..\..\..\Ports\ARM-Cortex-M33\Generic\RealView\os_cpu
_a.asm
Comment: OSTaskSwHook used once
8 symbols
357 symbols in table
